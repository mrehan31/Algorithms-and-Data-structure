// 1319. Number of Operations to Make Network Connected

class UnionFind {
    int *parent;
    int n;

public:
    UnionFind(int n) {
        this->n = n;
        parent = new int[n];

        for (int node = 0; node < n; node++) {
            parent[node] = node;
        }
    }

    int find(int A) {
        int temp = A;
        while (A != parent[A]) {
            A = parent[A];
        }
        parent[temp] = A;
        return A;
    }

    bool unionNodes(int A, int B) {
        int rootA = find(A);
        int rootB = find(B);

        if (rootA == rootB) {
            return false;
        }

        parent[rootB] = rootA;

        return true;
    }
    
    int getComponentsNumber(){
        int components = 0;

        for (int i = 0; i < n; i++) {
            if (i == parent[i])
                components++;
        }

        return components;
    }
};


class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if (connections.size() < n - 1)
            return -1;

        UnionFind unionFind(n);
        int extraEdges = 0;

        for (auto connection : connections) {
            int A = connection[0];
            int B = connection[1];
            unionFind.unionNodes(A, B);
        }

        int components = unionFind.getComponentsNumber();
        return components - 1;
    }
};
