// 64. Minimum Path Sum

class Solution {
public:
    int helper(vector<vector<int>> &grid, int i, int j){
        if(i>=grid.size() || j >=grid[0].size())
            return INT_MAX;
        
        if(i==grid.size()-1 && j == grid[0].size()-1)
            return grid[i][j];
        
        return grid[i][j]+min(helper(grid, i+1, j), helper(grid,i,j+1));
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        return helper(grid,0,0);        
    }
};



class Solution {
public:  
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<int>> sum(m, vector<int> (n,grid[0][0]));
        
        for(int i=1; i<m; i++)
            sum[i][0] = sum[i-1][0] + grid[i][0];
        
        for(int j=1; j<n; j++)
            sum[0][j] = sum[0][j-1] + grid[0][j];
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                sum[i][j] = min(sum[i-1][j], sum[i][j-1])+ grid[i][j];
            }
        }
        return sum[m-1][n-1];   
    }
};

