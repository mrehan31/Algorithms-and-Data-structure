class Solution {
public: 
    vector<int> calc(int n, int next){
        int x = (next-1)/n;
        int y = (next-1)%n;

        if(x%2 == 1) y = n-1-y;

        x = n-1-x;
        return {x, y};
    }
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();

        queue<int> q;

        q.push(1);

        int steps = 0;

        while(!q.empty()){
            int sz = q.size();

            while(sz--){
                int cur = q.front(); q.pop();
                if(cur == n*n)  return steps;

                for(int i=1; i<=6; i++){
                    int next = cur + i;
                    vector<int> v = calc(n, next);

                    if(next > n*n) break;

                    int r = v[0], c = v[1];
                    if(board[r][c] != -1)   next = board[r][c];

                    if(board[r][c] != n*n + 1){
                        q.push(next);
                        board[r][c] = n*n+1;
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
