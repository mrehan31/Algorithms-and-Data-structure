#include <vector>
#include <iostream>
using namespace std;

class UnionFind{
    vector<int> rank, parents;
    int n;
public:
    UnionFind(int n): n(n), rank(n, 1), parents(n){
        for(int i=0; i<n; i++){
            parents[i] = i;
        }
    }
    int find(int x){
        if(parents[x] == x) return x;

        return parents[x] = find(parents[x]);
    }
    bool unionFind(int x, int y){
        int rootX = find(x);
        int rootY = find(y);

        if(rootX == rootY)  return false;

        if(rank[rootX] < rank[rootY])
            parents[rootX] = rootY;
        else if (rank[rootX] > rank[rootY])
            parents[rootY] = rootX;
        else{
            parents[rootX] = rootY;
            rank[rootY]++;
        }
        return true;
    }
};

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        UnionFind uf = UnionFind(n);

        for(auto edge:edges){
            if(!uf.unionFind(edge[0], edge[1])) return edge;
        }
        return {-1, -1}; 
    }
};
