// 490. The Maze

class Solution {
public:    
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        int m = maze.size();
        
        if(m == 0)  return false;
        
        int n = maze[0].size();
        
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0,1}};
        
        queue<vector<int>> q;
        
        vector<vector<int>> visited(m, vector<int>(n, -1));
        
        q.push(start);
        visited[start[0]][start[1]] = 1;
                                    
        
        while(!q.empty()){
            auto cur = q.front();
            q.pop();
            
            for(auto d: dir){
                int next_r = cur[0];
                int next_c = cur[1];
                
                while(next_r+d[0] >= 0 && next_r+d[0]<m && next_c+d[1] >= 0 && next_c+d[1] < n && maze[next_r+d[0]][next_c+d[1]] == 0 ){
                    next_r += d[0];
                    next_c += d[1];
                }
                
                if(next_r == destination[0] && next_c == destination[1])    return true;
                
                if(visited[next_r][next_c] == -1){
                    q.push({next_r, next_c});
                    visited[next_r][next_c] = 1;
                }    
            }
        }
        return false;
    }
};
