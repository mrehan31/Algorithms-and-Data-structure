// Brute force approach: time complexity O(2^n),  space complexity: O(1)

/*class Solution {
public:
    
    int rob(vector<int>& nums) {
        return rec(nums, 0);
    }
    
    int rec(vector<int>&nums, int idx){
        if(idx >= nums.size())  return 0;
        
        return max(nums[idx]+ rec(nums, idx+2), rec(nums, idx+1));
    }
};*/


// Time complexity: O(n), space complexity: O(n)

/*class Solution {
public:
    
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size(), -1);
        return rec(nums, 0, dp);
    }
    
    int rec(vector<int>&nums, int idx, vector<int> &dp){
        if(idx >= nums.size())  return 0;
        
        if(dp[idx] != -1) return dp[idx];
        
        return dp[idx] = max(nums[idx]+ rec(nums, idx+2, dp), rec(nums, idx+1, dp));
    }
};*/

/*
   Time complexity: O(n), space complexity: O(n)
*/

/*class Solution {
public:
    
    int rob(vector<int>& nums) {
        if(nums.size() == 1)    return nums[0];
        
        vector<int> dp(nums.size());
        
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        
        for(int i=2; i<nums.size(); i++){
            dp[i] = max(nums[i]+dp[i-2], dp[i-1]);
        }
        return dp[nums.size()-1];
    }
};*/

/*
   Time complexity: O(n), space complexity: O(1)
*/
class Solution {
public:
    
    int rob(vector<int>& nums) {
        if(nums.size() == 1)    return nums[0];
        int dp_im2 = nums[0];
        int dp_im1 = max(nums[0], nums[1]);
        int dp_i = dp_im1;
        
        for(int i=2; i<nums.size(); i++){
            dp_i = max(nums[i]+dp_im2, dp_im1);
            dp_im2 = dp_im1;
            dp_im1 = dp_i;
        }
        return dp_i;
    }
};
