class Solution {
    ListNode* helper(vector<ListNode*>&lists, int left, int right){
        if(left == right)   return lists[left];

        int mid = left + (right - left)/2;
        ListNode* partition1 = helper(lists, left, mid);
        ListNode* partition2 = helper(lists, mid+1, right);

        return mergeLists(partition1, partition2);
    }
    ListNode* mergeLists(ListNode* list1, ListNode* list2){
        if(!list1)  return list2;
        if(!list2)  return list1;

        if(list1->val < list2->val){
            list1->next = mergeLists(list1->next, list2);
            return list1;
        }
        else{
            list2->next = mergeLists(list1, list2->next);
            return list2;
        }
    }

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return nullptr;

        int left = 0, right = lists.size()-1;
        return helper(lists, left, right);
    }
};
