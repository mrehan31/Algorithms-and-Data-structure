// 323. Number of Connected Components in an Undirected Graph

class UnionFind {
    vector < int > parent;
    vector < int > rank;

public: 
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n);

        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

   int find(int A) {
        while (A != parent[A])
            A = parent[A];

        return A;
    }

    void unionNodes(int x, int y) {
        int root_x = find(x);
        int root_y = find(y);

        if (root_x == root_y) {
            return;
        }

        parent[root_x] = root_y;
        return;
    }
};

class Solution {
    public: int countComponents(int n, vector < vector < int >> & edges) {
        UnionFind unionFind(n);

        for (const auto & edge: edges) {
            unionFind.unionNodes(edge[0], edge[1]);
        }

        int count = 0;
        for (int i = 0; i < n; i++) {
            if(unionFind.find(i) == i)
                count++;
        }
        
        return count;
    }
};
