struct TrieNode{
    TrieNode* children[26];
    bool isEnd;

    TrieNode(){
        isEnd = false;
        for(int i=0; i<26; i++) children[i] = nullptr;
    }
};
class WordDictionary {
    TrieNode *root;
public:
    WordDictionary(){
        root = new TrieNode();
    }
    void addWord(string word){
        TrieNode* node = root;
        for(char ch: word){
            int index = ch - 'a';
            if(node->children[index] == nullptr)
                node->children[index] = new TrieNode();
            node = node->children[index];
        }
        node->isEnd = true;
    }
    
    bool search(string word) {
        TrieNode* node = root;
        return searchWord(word, 0, node);
    }
    bool searchWord(string &word, int i, TrieNode* node){
        if(i == word.size())    return node->isEnd;

        if(word[i] == '.'){
            bool ret = false;
            for(int j=0; j<26; j++){
                if(node->children[j] != nullptr){
                    ret = ret || searchWord(word, i+1, node->children[j]);
                }
            }
            return ret;
        }
        else{
            if(node->children[word[i] - 'a'] == nullptr)    return false;
            return searchWord(word, i+1, node->children[word[i] - 'a']);
        }
    }
};
