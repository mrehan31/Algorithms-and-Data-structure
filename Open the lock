class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> set(deadends.begin(), deadends.end());

        if(set.find("0000") != set.end())   return -1;

        unordered_set<string> visited;

        queue<string> q;

        q.push("0000");
        visited.insert("0000");

        int moves = 0;

        while(!q.empty()){
            int size = q.size();

            while(size--){
                string cur = q.front(); 
                q.pop();

                if(cur == target)   return moves;

                for(int i=0; i<4; i++){
                    char temp = cur[i];

                    cur[i] = temp=='9'? '0': temp+1;

                    if(set.find(cur) == set.end() && visited.find(cur) == visited.end()){
                        q.push(cur);
                        visited.insert(cur);
                    } 

                    cur[i] = temp=='0'? '9': temp-1;

                    if(set.find(cur) == set.end() && visited.find(cur) == visited.end()){
                        q.push(cur);
                        visited.insert(cur);
                    } 
                    cur[i] = temp;
                }
            }
            moves++;
        }
        return -1;
    }
};
