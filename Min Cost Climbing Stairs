/*class Solution {
    
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        vector<int> mem(n+1, -1);
        
        return helper(cost, cost.size(), mem);
    }
    
    int helper(vector<int> &cost, int i, vector<int> &mem){
        if (i==0 || i==1)   return 0;
        if(mem[i-1] == -1)
            mem[i-1] = helper(cost, i-1, mem) + cost[i-1];
        
        if(mem[i-2] == -1)
            mem[i-2] = helper(cost, i-2, mem) + cost[i-2];
        
        return min(mem[i-1], mem[i-2]);
    }
};*/


/*class Solution {
    
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        int dp[n];
        
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i=2; i<n; i++)
            dp[i] = min(dp[i-1], dp[i-2]) + cost[i];
        
        return min(dp[n-1], dp[n-2]);
    }
};*/

class Solution {
    
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        int dp_nm1 = cost[1];
        int dp_nm2 = cost[0];
        
        for(int i=2; i<n; i++){
            int cur = min(dp_nm1, dp_nm2) + cost[i];
            dp_nm2 = dp_nm1;
            dp_nm1 = cur;
        }
        
        return min(dp_nm1, dp_nm2);
    }
};
