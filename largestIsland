class Solution {
    vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    unordered_map<int, int> island_sizes; // key: island id, val: island size

    int dfs(vector<vector<int>>&grid, int i, int j, int islandId){ 
        if(i<0 || i >= grid.size() || j<0 || j >= grid[0].size() || grid[i][j] != 1) return 0;

        grid[i][j] = islandId; // marked as visited

        int count = 1;

        for(auto &d: dir){
            int new_r = i + d[0], new_c = j + d[1];
            count += dfs(grid, new_r, new_c, islandId);
        }
        return count;
    }
public:
    int largestIsland(vector<vector<int>>& grid) {
        
        queue<pair<int, int>> q;

        int islandId = 2;

        for(int i=0; i<grid.size(); i++){
            for(int j = 0; j<grid[0].size(); j++){
                if(grid[i][j] == 1){
                    int islandSize = dfs(grid, i, j, islandId);
                    island_sizes[islandId] = islandSize;
                    islandId++;
                }
            }
        }
        
        int maxSize= 0;

        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){

                if(grid[i][j] == 0){
                    unordered_set<int> neighboring_island;

                    for(auto & d: dir){
                        int r = i + d[0], c = j + d[1];
                        if(r >= 0 && r < grid.size() && c >= 0 && c < grid[0].size() && grid[r][c] != 0){
                            neighboring_island.insert(grid[r][c]);
                        }
                    }
                    int size_with_neigh = 0;
                    for(auto & island: neighboring_island) size_with_neigh += island_sizes[island];

                    maxSize = max(maxSize, size_with_neigh + 1);  
                } 
                else{
                    maxSize = max(maxSize, island_sizes[grid[i][j]]);
                }
            }
        }
        return maxSize;
    }
};
