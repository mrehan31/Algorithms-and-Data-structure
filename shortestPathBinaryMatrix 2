class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}, {-1, 1}, {-1, -1}, {1, 1}, {1, -1}};

        if(grid[0][0] == 1 || grid[n-1][n-1] == 1)  return -1;

        queue<pair<int, int>> q;

        q.push({0, 0});
        int steps = 1;
        grid[0][0] = 2;

        while(!q.empty()){
            int qSize = q.size();

            for(int i=0; i<qSize; i++){
                auto [r, c] = q.front();
                q.pop();

                if(r == n-1 && c == n-1)    return steps;

                for(auto &d: dir){
                    int new_r = r + d[0], new_c = c + d[1];
                    if(new_r >= 0 && new_r < n && new_c >= 0 && new_c < n && grid[new_r][new_c] == 0){
                        q.push({new_r, new_c});
                        grid[new_r][new_c] = 2;
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
