class Solution {
    bool isValid(vector<vector<char>> &board, int i, int j){
        return (i>=0 && i<board.size() && j>=0 && j<board[0].size());
    }
    vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}, {-1, 1}, {-1, -1}, {1, 1}, {1, -1}};
    int hasAdjacent(vector<vector<char>>&board, int i, int j){
        int count = 0;

        for(auto& d: dir){
            int r = i + d[0], c = j + d[1];
            if(isValid(board, r, c) && board[r][c] == 'M') count++;
        }
        return count;
    }
    void dfs(vector<vector<char>>&board, vector<vector<bool>>&visited, int i, int j){
        if(!isValid(board, i, j) || visited[i][j])   return;

        visited[i][j] = true;

        if(board[i][j] == 'M'){
            board[i][j] = 'X';
            return;
        }
        if(board[i][j] == 'E'){
            int count = hasAdjacent(board, i, j);
            if(count > 0){
                board[i][j] = count + '0';
            }
            else{
                board[i][j] = 'B';
                for(auto &d:dir){
                    int r = i + d[0], c = j + d[1];
                    dfs(board, visited, r, c);
                }
            }
        }
    }
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));
        dfs(board, visited, click[0], click[1]);
        return board;
    }
};
