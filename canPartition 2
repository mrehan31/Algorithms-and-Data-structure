
class Solution {
public:
  int canPartition(const vector<int> &nums) { 
    int sum = 0;
    for(int num: nums)  sum += num;

    int n = nums.size();
    vector<vector<bool>> dp(n+1, vector<bool>(sum/2+1, false));

    for(int i=0; i<n; i++){
      dp[i][0] = true;
    }
    for(int s=0; s <= sum/2; s++){
      dp[0][s] = (s == nums[0]);
    }
    for(int i=1; i<n; i++){
      for(int s=1; s<= sum/2; s++){
        if(dp[i-1][s]){
          dp[i][s] = true;
        }
        else{ 
          if(s>=nums[i])
            dp[i][s] = dp[i-1][s-nums[i]];
        }
      }
    }
    int sum1 = 0;

    for(int s = sum/2; s>=0; s--){
      if(dp[n-1][s]){
        sum1 = s;
        break;
      }
    }
    int sum2 = sum - sum1;

    return abs(sum1 - sum2); 
  }
};
