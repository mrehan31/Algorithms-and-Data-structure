// 1208. Get Equal Substrings Within Budget


/*

// Brute force approach 

class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int maxLen = 0;
        
        for(int i=0; i<s.size(); i++){
            int sum = 0;
            for(int j=i; j<s.size(); j++){
                
                sum += abs(s[j]-t[j]);
                
                if(sum <= maxCost)
                    maxLen = max(maxLen, j-i+1);
                else
                    break;
            }
        }
        return maxLen;
    }
};
*/

// Sliding window approach

class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int maxLen = 0;
        
        int winStart = 0, winEnd = 0, sum=0;
        
        while(winEnd < s.size()){
            sum += abs(s[winEnd] - t[winEnd]);
            
            if(sum <= maxCost)
                maxLen = max(maxLen, winEnd - winStart + 1);
            
            while(sum>maxCost){
                sum -= abs(s[winStart] - t[winStart]);
                winStart++;
            }
            winEnd++;
        }
        return maxLen;
    }
};
