// 63. Unique Paths II

class Solution {
    vector<vector<int>> dp;
    vector<vector<int>> gGrid;
    
public:
    Solution(): dp(101, vector<int>(101,-1)){}
    
    int helper(int m, int n) {
    
        if(m<0 || n<0)  return 0;
        if(m==0 && n==0)    return 1;
        
        if(gGrid[m][n] == 1)
            return 0;
        
        if(dp[m][n] != -1)
            return dp[m][n];        
        
        dp[m][n] = helper(m,n-1)+helper(m-1,n);
        return dp[m][n];
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        gGrid = grid;
        
        int m = grid.size()-1, n = grid[0].size()-1;
        
        if(grid[0][0]==1 || grid[m][n] == 1) return 0;
               
        return helper(m,n);
    }
    
};




/*
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        
        int m = grid.size();
        if(m == 0)  return 0;
        
        int n = grid[0].size();
        
        vector<vector<int>> dp(m,vector<int>(n,0));
        
        for(int i=0; i<m; i++){
            if(grid[i][0] == 1)
                break;
            
            dp[i][0]=1;
        }
        
        for(int i=0; i<n; i++){
            if(grid[0][i] == 1)
                break;
            
            dp[0][i] = 1;
        }
        
        for(int i=1; i<m; i++)
            for(int j=1; j<n; j++){
                if(grid[i][j] == 1)
                    continue;
                
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        return dp[m-1][n-1];
    }
};*/
