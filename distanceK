class Solution {
    void add_parent(TreeNode* root, unordered_map<TreeNode*, TreeNode*>&map, TreeNode* parent){
        if(root == nullptr) return;
        if(parent != nullptr) map[root] = parent;
        add_parent(root->left, map, root);
        add_parent(root->right, map, root);
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> result;
        unordered_map<TreeNode*, TreeNode*> parentMap;
        add_parent(root, parentMap, nullptr);
        queue<TreeNode*> q;
        unordered_set<int> visited;

        q.push(target);
        visited.insert(target->val);

        while(k-- && !q.empty()){
            int qSize = q.size();

            for(int i=0; i<qSize; i++){
                TreeNode* curNode = q.front();
                q.pop();
                visited.insert(curNode->val);

                if(curNode->left && visited.count(curNode->left->val) == 0) q.push(curNode->left);
                if(curNode->right && visited.count(curNode->right->val) == 0)   q.push(curNode->right);
                if(parentMap[curNode] && visited.count(parentMap[curNode]->val) == 0) q.push(parentMap[curNode]);   
            }
        }
        while(!q.empty()){
            result.push_back(q.front()->val);
            q.pop();
        }
        return result;
    }
};
