class Solution {
    ListNode* mergeLists(ListNode* l1, ListNode*l2){
        if(l1 == nullptr && l2 == nullptr)  return l1;

        if(l1 == nullptr) return l2;
        if(l2 == nullptr)   return l1;

        if(l1->val <= l2->val){
            l1->next = mergeLists(l1->next, l2);
            return l1;
        }
        else{
            l2->next = mergeLists(l1, l2->next);
            return l2;
        }
    }
    ListNode* helper(int left, int right, vector<ListNode*>&lists){
        if(left == right)   return lists[left];

        int mid = left + (right - left)/2;
        return mergeLists(helper(left, mid, lists), helper(mid+1, right, lists));
    }
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)   return nullptr;
        int left = 0, right = lists.size()-1;

        return helper(left, right, lists);
    }
};
