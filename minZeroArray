class Solution {
    bool canNumBeZeros(vector<int>&nums, vector<vector<int>>&queries, int mid){
        vector<int>differences(nums.size()+1, 0);

        for(int i=0; i<mid; i++){
            int start = queries[i][0], end = queries[i][1], val = queries[i][2];

            differences[start] += val;
            differences[end+1] -= val;
        }

        int sum = 0;
        for(int i=0; i<nums.size(); i++){
            sum += differences[i];
            if(sum < nums[i])   return false;  
        }
        return true;
    }

public:
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int left = 0, right = queries.size();

        int res = -1;

        while(left <= right){
            int mid = left + (right - left)/2;

            if(canNumBeZeros(nums, queries, mid)){
                res = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return res;
    }
};
