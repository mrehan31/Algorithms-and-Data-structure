class Solution {
    vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
    bool isValid(int n, int row, int col){
        return row >= 0 && col >= 0 && row < n && col < n;
    }
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0] != 0 || grid[n-1][n-1])   return -1;

        queue<pair<int, int>> q;

        q.push({0, 0});
        grid[0][0] = 2; // mark the src as visited

        int dist = 0;

        while(!q.empty()){
            int qSize = q.size();
            dist++;

            for(int i=0; i<qSize; i++){
                auto curCell = q.front();
                q.pop();

                int row = curCell.first, col = curCell.second;

                if(row == n-1 && col == n-1)    return dist;
                
                for(auto& d: dir){
                    int next_row = row + d[0], next_col = col + d[1];
                    if(isValid(n, next_row, next_col) && grid[next_row][next_col] == 0){
                        grid[next_row][next_col] = 2;
                        q.push({next_row, next_col});
                    }
                }
            }
        }
        return -1;
    }
};
