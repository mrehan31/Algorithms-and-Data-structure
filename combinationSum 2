class Solution {
    void backtrack(vector<int>&candidates, vector<vector<int>>&result, int index, vector<int>&tempList, int target){
        if(target < 0)  return;
        if(target == 0){
            result.push_back(tempList);
            return;
        }
        for(int i=index; i<candidates.size(); i++){
            if(i>index && candidates[i] == candidates[i-1]) continue;
            tempList.push_back(candidates[i]);
            backtrack(candidates, result, i+1, tempList, target-candidates[i]);
            tempList.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result;

        vector<int> tempList;
        sort(candidates.begin(), candidates.end());

        backtrack(candidates, result, 0, tempList, target);
        return result;
    }
};
