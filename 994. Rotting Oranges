// 994. Rotting Oranges

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int fresh=0, min=0;
        
        queue<vector<int>> q;
        
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[0].size(); j++){
                if(grid[i][j]== 1) fresh++;
                else if(grid[i][j] == 2) q.push({i,j});
            }
        }
        
        vector<vector<int>> dir = {{-1,0}, {1,0}, {0,-1},{0,1}};
        
        while(!q.empty()){
            int size = q.size();
            bool rotton = false;
            
            for(int i=0; i<size; i++){
                vector<int> cur = q.front();
                q.pop();
                
                
                for(auto d: dir){
                    int ii = cur[0] + d[0];
                    int jj = cur[1] + d[1];
                    
                    if(ii>=0 && ii<grid.size() && jj>=0 && jj< grid[0].size() && grid[ii][jj]==1){
                        grid[ii][jj] = 2;
                        fresh--;
                        rotton = true; 
                        q.push({ii,jj});
                    }                        
                }                
            }
            if(rotton)  min++;
        }
        return fresh?-1:min;        
    }
};

