class Solution {
public:
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), cnt = 0;

        for(int i=1; i<m-1; i++){
            for(int j=1; j<n-1; j++){
                if(check(grid, i, j)) cnt++;
            }
        }
        return cnt;
    }
    bool check(vector<vector<int>>& grid, int i, int j){
        
        unordered_set<int> visited;
        int d1 = grid[i-1][j-1] + grid[i][j] + grid[i+1][j+1];
        int d2 = grid[i-1][j+1] + grid[i][j] + grid[i+1][j-1];

        vector<int> rowSum(3, 0), colSum(3, 0);
        
        for(int ii = i-1; ii<= i+1; ii++){
            for(int jj = j-1; jj<=j+1; jj++){
                rowSum[ii-i+1] += grid[ii][jj];
                colSum[jj-j+1] += grid[ii][jj];
                visited.insert(grid[ii][jj]);
                if(grid[ii][jj] >= 10 || grid[ii][jj] <= 0) return false;
            }
        }

        if(d1 != d2 || d2 != rowSum[0] || rowSum[0] != rowSum[1] || rowSum[1] != rowSum[2] || rowSum[0] != colSum[0] || colSum[0] != colSum[1] || colSum[1] != colSum[2] || visited.size() != 9)    return false;

        return true;
    }
};
