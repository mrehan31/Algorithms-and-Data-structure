// 547. Number of Provinces

class UnionFind {
    int *parent;
    int n;

public:
    UnionFind(int n) {
        this->n = n;
        parent = new int[n];

        for (int node = 0; node < n; node++) {
            parent[node] = node;
        }
    }

    int find(int A) {
        while (A != parent[A]) {
            A = parent[A];
        }

        return A;
    }

    bool unionNodes(int A, int B) {
        int rootA = find(A);
        int rootB = find(B);

        if (rootA == rootB) {
            return false;
        }

        parent[rootA] = rootB;
        
        return true;
    }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        UnionFind unionFind = UnionFind(n);
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (isConnected[i][j] == 1) {
                    unionFind.unionNodes(i, j);
                }
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if(unionFind.find(i) == i)
                count++;
        }
        return count;
    }
};
