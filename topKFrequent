class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> umap;

        for(int num: nums)  umap[num]++;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;

        for(auto& it: umap){
            int count = it.second, num = it.first;

            if(minHeap.size() < k || minHeap.top().first < count){
                minHeap.push({count, num});
            }
            if(minHeap.size() > k){
                minHeap.pop();
            }
        }
        vector<int> result;

        while(!minHeap.empty()){
            result.push_back(minHeap.top().second);
            minHeap.pop();
        }
        return result;
    }
};
