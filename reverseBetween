class Solution {
    ListNode *reverseList(ListNode* root){
        if(root == nullptr) return root;

        ListNode* prev= nullptr;
        while(root){
            ListNode* nextNode = root->next;
            root->next = prev;
            prev = root;
            root = nextNode;
        }
        return prev;
    }
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode * dummy = new ListNode(0);
        dummy->next = head;

        ListNode* start = dummy;

        while(left>1){
            start = start->next;
            left--;
        }
        
        ListNode * end = dummy;
        while(right > 0){
            end = end->next;
            right--;
        }

        ListNode* remainingList = end->next;
        end->next = nullptr;
        ListNode* lastNodeAfterRev = start->next;

        start->next = reverseList(start->next);
        if(lastNodeAfterRev) lastNodeAfterRev->next = remainingList;

        return dummy->next;
    }
};
