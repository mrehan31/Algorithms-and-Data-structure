// 287. Find the Duplicate Number

// Using sorting- time complexity O(Nlog N), space complexity O(1)


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        
        for(int i=0; i<nums.size()-1; i++){
            if(nums[i] == nums[i+1])
                return nums[i];
        }
        return -1;        
    }
};


// Using set- time complexity O(N), space complexity O(N)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_set<int> set;
        
        for(int n:nums){
            if(set.count(n))
                return n;
            else
                set.insert(n);
        }
        return -1;

    }
};

// Using index of array - time complexity O(N), space complexity O(1)


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++) {
            int index = abs(nums[i]) - 1;
            
            // mark as visited
            nums[index] *= -1;
            // incase of duplicate, this will become +ve 
            if(nums[index] > 0)
                return abs(nums[i]);
        }    
        return -1;
    }
};
